{"version":3,"sources":["resources/models/bamboo/BambooWithBones.fbx","resources/textures/bamboo/diffuse.jpg","resources/textures/bamboo/specular.jpg","resources/textures/bamboo/normal.jpg","resources/textures/bamboo/alpha.jpg","graphics/models/Bamboo.js","resources/textures/grass/grass.jpg","graphics/models/Grass.js","resources/textures/wood/wood.jpg","graphics/models/Sideboard.js","graphics/Forest.js","components/canvas/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Bamboo","textureLoader","treeCount","width","height","this","material","THREE","map","load","diffuseDir","specularMap","specularDir","normalMap","normalDir","alphaMap","alphaDir","alphaTest","side","opacity","transparent","xPositionRange","zPositionRange","trees","animatedTrees","isFadingIn","scene","self","FBXLoader","modelDir","object","traverse","child","i","clone","SkeletonUtils","position","x","randFloat","z","rotation","y","Math","PI","scaleNum","scale","add","push","tree","skeleton","bones","Grass","texture","grassDir","wrapS","wrapT","repeat","set","geometry","plane","Sideboard","woodDir","relativeXPos","relativeZPos","topBoard","botBoard","rightBoard","leftBoard","Forest","canvas","settings","camera","window","innerWidth","innerHeight","renderer","antialias","setSize","setClearColor","controls","OrbitControls","domElement","target","update","raycaster","mouse","initModels","loadScene","render","loop","animationFrameId","requestAnimationFrame","fadeIn","clearScene","bamboo","grass","sideboard","color","fog","background","makeVisible","sceneMeshes","sceneMesh","remove","parseFloat","setFromCamera","intersects","intersectObjects","getTrees","Canvas","props","useRef","forest","useEffect","current","onmousemove","e","clientX","clientY","onMouseMove","updateCount","ref","className","App","useState","setSettings","setUpdateCount","data","onUpdate","datgui","path","label","min","max","step","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d248a8ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/BambooWithBones.78755282.fbx\";","export default __webpack_public_path__ + \"static/media/diffuse.4c274908.jpg\";","export default __webpack_public_path__ + \"static/media/specular.c52433c2.jpg\";","export default __webpack_public_path__ + \"static/media/normal.69df512f.jpg\";","export default __webpack_public_path__ + \"static/media/alpha.d3f17e68.jpg\";","import * as THREE from \"three\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\r\nimport { SkeletonUtils } from \"three/examples/jsm/utils/SkeletonUtils\";\r\n\r\nimport modelDir from \"../../resources/models/bamboo/BambooWithBones.fbx\";\r\n\r\nimport diffuseDir from \"../../resources/textures/bamboo/diffuse.jpg\";\r\nimport specularDir from \"../../resources/textures/bamboo/specular.jpg\";\r\nimport normalDir from \"../../resources/textures/bamboo/normal.jpg\";\r\nimport alphaDir from \"../../resources/textures/bamboo/alpha.jpg\";\r\n\r\nexport default class Bamboo {\r\n  constructor(textureLoader, treeCount, width, height) {\r\n    this.material = new THREE.MeshPhongMaterial({\r\n      map: textureLoader.load(diffuseDir),\r\n      specularMap: textureLoader.load(specularDir),\r\n      normalMap: textureLoader.load(normalDir),\r\n      alphaMap: textureLoader.load(alphaDir),\r\n      alphaTest: 0.8,\r\n      side:THREE.DoubleSide,\r\n      opacity: 0.0,\r\n      transparent: true\r\n    });\r\n\r\n    this.treeCount = treeCount;\r\n    this.xPositionRange = width/2;\r\n    this.zPositionRange = height/2;\r\n\r\n    this.trees = [];\r\n    this.animatedTrees = [];\r\n    this.isFadingIn = false;\r\n  }\r\n\r\n  load(scene){\r\n    const self = this;\r\n    new FBXLoader().load(\r\n      modelDir,\r\n      function(object) {\r\n        object.traverse(function (child) {\r\n          if (child instanceof THREE.SkinnedMesh) {\r\n            child.material = self.material;\r\n          }\r\n        });\r\n\r\n        for (let i = 0; i < self.treeCount; i++) {\r\n          const clone = SkeletonUtils.clone(object);\r\n\r\n          clone.position.x = THREE.MathUtils.randFloat(-self.xPositionRange, self.xPositionRange);\r\n          clone.position.z = THREE.MathUtils.randFloat(-self.zPositionRange, self.zPositionRange);\r\n\r\n          clone.rotation.y = Math.PI * THREE.MathUtils.randFloat(0, 1);\r\n\r\n          const scaleNum = THREE.MathUtils.randFloat(0.5, 1.25);\r\n          clone.scale.x = scaleNum;\r\n          clone.scale.y = scaleNum;\r\n          clone.scale.z = scaleNum;\r\n\r\n          scene.add(clone);\r\n          self.trees.push(clone);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  makeVisible(){\r\n    this.material.opacity = 1.0;\r\n    this.isFadingIn = false;\r\n  }\r\n\r\n  fadeIn(){\r\n    if(this.material.opacity < 0.8){\r\n      this.isFadingIn = true;\r\n      this.material.opacity = 0.8;\r\n    }\r\n    else if(this.material.opacity < 1.0){\r\n      this.material.opacity += 0.001;\r\n    }\r\n    else if(this.material.opacity > 1.0){\r\n      this.isFadingIn = false;\r\n      this.material.opacity = 1.0;\r\n    }\r\n  }\r\n\r\n  animateTree(tree){\r\n    for(const bone of tree.skeleton.bones){\r\n      bone.rotation.x += (Math.PI / 256);\r\n    }\r\n\r\n    // this.animatedTrees.push(tree);\r\n    // console.log(this.animatedTrees);\r\n\r\n    // for ( let i = 0; i < mesh.skeleton.bones.length; i ++ ) {\r\n    //   mesh.skeleton.bones[ i ].rotation.z = Math.sin( time ) * 2 / mesh.skeleton.bones.length;\r\n    // }\r\n  }\r\n\r\n  getTrees(){\r\n    return this.trees;\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/grass.3be89642.jpg\";","import * as THREE from \"three\";\r\n\r\nimport grassDir from \"../../resources/textures/grass/grass.jpg\";\r\n\r\nexport default class Grass {\r\n  constructor(textureLoader, width, height) {\r\n    const texture = textureLoader.load(grassDir);\r\n    texture.wrapS = THREE.RepeatWrapping;\r\n    texture.wrapT = THREE.RepeatWrapping;\r\n    texture.repeat.set( 4, 4 );\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      map: texture,\r\n      side: THREE.DoubleSide,\r\n      opacity: 0.0,\r\n      transparent: true\r\n    });\r\n\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  load(scene){\r\n    const geometry = new THREE.PlaneGeometry(this.width, this.height);\r\n    const plane = new THREE.Mesh(geometry, this.material);\r\n    plane.rotation.x = Math.PI/2;\r\n    scene.add(plane);\r\n  }\r\n\r\n  makeVisible(){\r\n    this.material.opacity = 1.0;\r\n  }\r\n\r\n  fadeIn(){\r\n    if(this.material.opacity < 1.0){\r\n      this.material.opacity += 0.005;\r\n    }\r\n    else if(this.material.opacity > 1.0){\r\n      this.material.opacity = 1.0;\r\n    }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/wood.b467f5fc.jpg\";","import * as THREE from \"three\";\r\n\r\nimport woodDir from \"../../resources/textures/wood/wood.jpg\";\r\n\r\nexport default class Sideboard {\r\n  constructor(textureLoader, width, height){\r\n    const texture = textureLoader.load(woodDir);\r\n    texture.wrapS = THREE.RepeatWrapping;\r\n    texture.wrapT = THREE.RepeatWrapping;\r\n    texture.repeat.set(7, 1);\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      map: texture,\r\n      side: THREE.DoubleSide,\r\n      opacity: 0.0,\r\n      transparent: true\r\n    });\r\n\r\n    this.width = width;\r\n    this.height = height;\r\n    this.relativeXPos = width/2 + 2.5;\r\n    this.relativeZPos = height/2 + 2.5;\r\n  }\r\n\r\n  load(scene){\r\n    const topBoard = new THREE.Mesh(new THREE.BoxGeometry(this.width, 20, 5), this.material);\r\n    topBoard.position.z = -this.relativeZPos;\r\n    topBoard.position.y = 10;\r\n    scene.add(topBoard);\r\n\r\n    const botBoard = topBoard.clone();\r\n    botBoard.position.z = this.relativeZPos;\r\n    botBoard.position.y = 10;\r\n    scene.add(botBoard);\r\n\r\n    const rightBoard = new THREE.Mesh(new THREE.BoxGeometry(this.height + 10, 20, 5), this.material);\r\n    rightBoard.rotation.y = Math.PI/2;\r\n    rightBoard.position.x = this.relativeXPos;\r\n    rightBoard.position.z = 0;\r\n    rightBoard.position.y = 10;\r\n    scene.add(rightBoard);\r\n\r\n    const leftBoard = rightBoard.clone();\r\n    leftBoard.position.x = -this.relativeXPos;\r\n    scene.add(leftBoard);\r\n  }\r\n\r\n  makeVisible(){\r\n    this.material.opacity = 1.0;\r\n  }\r\n\r\n  fadeIn(){\r\n    if(this.material.opacity < 1.0){\r\n      this.material.opacity += 0.005;\r\n    }\r\n    else if(this.material.opacity > 1.0){\r\n      this.material.opacity = 1.0;\r\n    }\r\n  }\r\n}\r\n","/*\r\nTo-Do:\r\n  - Loading state?\r\n  - New models\r\n  - Check when all models loaded\r\n  - Fix bamboo alphaMap for a smooth fade-in\r\n\r\nLinks of interest:\r\nhttps://stackoverflow.com/questions/54731571/animation-rotation-movement-of-an-object-on-mouse-click\r\nhttps://threejs.org/examples/webgl_water_flowmap.html\r\n*/\r\n\r\nimport * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport Bamboo from \"./models/Bamboo.js\";\r\nimport Grass from \"./models/Grass.js\";\r\nimport Sideboard from \"./models/Sideboard.js\";\r\n\r\nexport default class Forest {\r\n  constructor(canvas, settings) {\r\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 100000);\r\n    this.camera.position.set(0, 250, 500);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true});\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.renderer.setClearColor(\"rgb(40, 44, 52)\");\r\n\r\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n    this.controls.target = new THREE.Vector3(0, 110, 0);\r\n    this.controls.update();\r\n\r\n    this.scene = new THREE.Scene();\r\n    this.raycaster = new THREE.Raycaster();\r\n    this.mouse = new THREE.Vector2();\r\n    this.textureLoader = new THREE.TextureLoader();\r\n\r\n    this.initModels(settings);\r\n    this.loadScene();\r\n    this.render();\r\n  }\r\n\r\n  render(){\r\n    const self = this;\r\n\r\n    function loop(){\r\n      self.animationFrameId = requestAnimationFrame(loop);\r\n      self.fadeIn();\r\n      self.renderer.render(self.scene, self.camera);\r\n    }\r\n\r\n    loop();\r\n  }\r\n\r\n  update(settings){\r\n    this.clearScene();\r\n    this.initModels(settings);\r\n    this.loadScene();\r\n  }\r\n\r\n  initModels(settings){\r\n    this.bamboo = new Bamboo(this.textureLoader, settings.trees, settings.width, settings.height);\r\n    this.grass = new Grass(this.textureLoader, settings.width, settings.height);\r\n    this.sideboard = new Sideboard(this.textureLoader, settings.width, settings.height);\r\n  }\r\n\r\n  loadScene() {\r\n    const near = 1;\r\n    const far = 900;\r\n    const color = 'white';\r\n    this.scene.fog = new THREE.Fog(color, near, far);\r\n    this.scene.background = new THREE.Color(color);\r\n\r\n    this.scene.add(new THREE.AmbientLight(0x333333, 15));\r\n\r\n    this.bamboo.load(this.scene);\r\n    this.bamboo.makeVisible();\r\n\r\n    this.grass.load(this.scene);\r\n    this.grass.makeVisible();\r\n\r\n    this.sideboard.load(this.scene);\r\n    this.sideboard.makeVisible();\r\n  }\r\n\r\n  clearScene(){\r\n    let sceneMeshes = [];\r\n    this.scene.traverse(function(child){\r\n        sceneMeshes.push(child);\r\n    });\r\n\r\n    for(const sceneMesh of sceneMeshes){\r\n        this.scene.remove(sceneMesh);\r\n    }\r\n  }\r\n\r\n  fadeIn(){\r\n    /*\r\n    The bamboo material has to be set to 0.8 opacity initially. This is because\r\n    if the material has an alphaTest value, it will remain transparent until\r\n    opacity >= alphaTest, so the bamboo material needs a head start when fading\r\n    in. I didn't set the other textures to alphaTest 0.8 so they can all just\r\n    fade in together, and this is because doing so breaks the opacity of\r\n    materials without alphaMaps.\r\n    */\r\n    this.bamboo.fadeIn();\r\n    this.grass.fadeIn();\r\n    this.sideboard.fadeIn();\r\n  }\r\n\r\n  onMouseMove(x, y){\r\n    this.mouse.x = parseFloat(x);\r\n    this.mouse.y = parseFloat(y);\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n\r\n  \tconst intersects = this.raycaster.intersectObjects(this.bamboo.getTrees(), true);\r\n  \tfor (const intersection of intersects) {\r\n      // console.log(intersection.object.skeleton.bones[0]);\r\n      // intersection.object.skeleton.bones[0].z += Math.PI/2;\r\n      // console.log(intersection.object);\r\n\r\n      // this.bamboo.animateTree(intersection.object);\r\n  \t}\r\n  }\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport \"./Canvas.css\";\r\n\r\nimport Forest from \"../../graphics/Forest.js\";\r\n\r\nfunction Canvas(props) {\r\n  const canvas = useRef(null);\r\n  const forest = useRef(null);\r\n\r\n  useEffect(() => {\r\n    forest.current = new Forest(canvas.current, props.settings);\r\n\r\n    canvas.current.onmousemove = (e) => {\r\n      if(!forest.current.bamboo.isFadingIn){\r\n        const x = (e.clientX / window.innerWidth) * 2 - 1;\r\n    \t  const y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n        forest.current.onMouseMove(x, y);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // VERY inconvenient, find a more dynamic method to update scene for data change\r\n  useEffect(() => {\r\n    if(props.updateCount>0){\r\n      forest.current.update(props.settings);\r\n    }\r\n  }, [props.updateCount]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvas} width={window.innerWidth} height={window.innerHeight} className=\"canvas\">\r\n        <p>Your browser doesn't support canvas.</p>\r\n      </canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;\r\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Canvas from \"./components/canvas/Canvas.js\";\n\nimport DatGui, { DatButton, DatNumber } from \"react-dat-gui\";\nimport \"react-dat-gui/dist/index.css\";\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    width: 300,\n    height: 300,\n    trees: 400\n  });\n  const [updateCount, setUpdateCount] = useState(0);\n\n  const handleChange = (datgui) => {\n    setSettings({\n      width: datgui.width,\n      height: datgui.height,\n      trees: datgui.trees\n    });\n  }\n\n  const handleUpdate = () => {\n    setUpdateCount(updateCount + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <DatGui data={settings} onUpdate={handleChange}>\n        <DatNumber path=\"width\" label=\"Width\" min={10} max={800} step={1}/>\n        <DatNumber path=\"height\" label=\"Height\" min={10} max={800} step={1}/>\n        <DatNumber path=\"trees\" label=\"Trees\" min={1} max={500} step={1}/>\n        <DatButton label=\"Update\" onClick={handleUpdate}/>\n      </DatGui>\n      <Canvas settings={settings} updateCount={updateCount}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}